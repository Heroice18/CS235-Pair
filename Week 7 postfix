/*******************************************
         * Iterator Class
         *******************************************/
        class iterator
        {
            friend list;
            friend node;
        private:
//            typename list <T> :: node * ptr;
            node * ptr;

        public:
            // for testing purposes
            #ifdef UNIT_TESTING
                friend int ::main(int argc, const char* argv[]);
            #endif

            // constructors, destructors, and assignment operator
            iterator()           : ptr(NULL)        {              }
            iterator(node * ptr) : ptr(ptr)         {              }
            iterator(const iterator & rhs) { *this = rhs; }
            iterator & operator = (const iterator & rhs)
            {
                this->ptr = rhs.ptr;
                return *this;
            }
            // equals, not equals operator
            bool operator != (const iterator & rhs) const { return rhs.ptr != this->ptr; }
            bool operator == (const iterator & rhs) const { return rhs.ptr == this->ptr; }

            T & operator * ()
            {
                cout << " HEYO ";
                if (NULL != this->ptr)
                {
                    if(this->ptr->data == NULL)
                    {
                       //cout << "hey there ";
                        throw "Error: dereferencing null data.";
                    }
                    //cout << " ENTERing";

                    return this->ptr->data;
                }
                else
                    throw "Error: dereferencing null node.";
            }
            const T & operator * () const
            {
//                cout << "What's UP  ";
                if (this->ptr !=NULL)
                {
  //                  cout << "HERE  ";
                    if(this->ptr->data != NULL)
                    {
    //                    cout << " AND HERE  ";
                        return this->ptr->data;
                    }

                }
                else
                    throw "Error: dereferencing null data.";
            }

            // prefix increment
            iterator & operator ++ ()
            {
                // check if ptr is NULL
                if (ptr)
                {
                    if(ptr->pNext == NULL)
                    {
                        return *this;
                    }
                    ptr = ptr->pNext;
                    return *this;
                }
                else
                    throw "Error: incrementing null node.";
            }
            // postfix increment
            iterator operator ++ (int postfix)
            {
                 //check = back();
               // T check = pTail->data;
                // check if ptr is NULL

                if (ptr != NULL)
                {
                    if(ptr->pNext == NULL)
                    {
                        return ptr;
                    }
                    iterator tmp(*this);
                    ptr = ptr->pNext;
                    return tmp;
                }
                else
                    throw "Error: incrementing null node.";

            }
            // prefix decrement
            iterator & operator -- ()
            {
                // check if ptr is NULL
                if (ptr)
                {
                    if(ptr->pPrev == NULL)
                    {
                        return *this;
                    }
                    ptr--;
                }
                 else
                    throw "Error: decrementing null node.";
                return *this;
            }
            // postfix decrement
            iterator operator -- (int postfix)
            {
                // check if ptr is NULL
                if (ptr)
                {
                    if(ptr->pPrev == NULL)
                    {
                        return ptr;
                    }
                    iterator tmp(*this);
                    ptr = ptr->pPrev;
                    return tmp;
                }
                 else
                    throw "Error: decrementing null node.";
                return *this;
            }

            friend iterator list<T>::insert(iterator & it, const T & data) throw(const char *);
            friend iterator list<T>::erase(iterator it);
        };


    };
