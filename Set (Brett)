//
//  set.h
//  Assignment 5
//
//  Created by Brett Mills on 2/3/19.
//  Copyright Â© 2019 Brett Mills. All rights reserved.
//

#ifndef set_h
#define set_h

#include <cstddef>
#include <iostream>

using namespace std;

#ifdef UNIT_TESTING
int main(int argc, const char* argv[]);
#endif


namespace custom
{
    template <class T>
    class iterator;
    
    template <class T>
    class set
    {
    private:
        T * buffer;
        int numElements;
        int numCapacity;
        
        int  findIndex(const T & t) const;
        void resize(int newCapacity);
        
    public:
        // for testing purposes (queue tests)
        #ifdef UNIT_TESTING
        friend int ::main(int argc, const char* argv[]);
        #endif
        
        //class iterator;
        
        set()  { buffer = NULL, numElements = 0, numCapacity = 0; }
        set(int newCapacity);
        set(const set & rhs);
        ~set() { clear(); }
        
        
        int  size()     const { return numElements; }
        int  capacity() const { return numCapacity; }
        bool empty()    const { return numElements == 0; }
        void clear()          { numElements = 0; }
        
        // set specific functions
        void erase(iterator <T> & it);
        void insert(const T t);
        iterator <T> find(const T &t);
        iterator <T> begin();
        iterator <T> end();
        
        // operators
        set <T> & operator =  (const set & rhs);
        set <T>   operator || (const set & rhs);
        set <T>   operator && (const set & rhs);
        set <T>   operator -  (const set & rhs);
        
      
        
    };
    
    /*******************************************
     * SET :: Iterator Class
     *******************************************/
    template <class T>
    class iterator
    {
    private:
        T * p;
        
    public:
        // constructors, destructors, and assignment operator
        iterator()      : p(NULL)      {              }
        iterator(T * p) : p(p)         {              }
        iterator(const iterator & rhs) { *this = rhs; }
        iterator & operator = (const iterator & rhs)
        {
            this->p = rhs.p;
            return *this;
        }
        // equals, not equals operator
        bool operator != (const iterator & rhs) const { return rhs.p != this->p; }
        bool operator == (const iterator & rhs) const { return rhs.p == this->p; }

        // prefix increment
        iterator & operator ++ ()
        {
            p++;
            return *this;
        }
        // postfix increment
        iterator operator ++ (int postfix)
        {
            iterator tmp(*this);
            p++;
            return tmp;
        }
        // prefix decrement
        iterator & operator -- ()
        {
            p--;
            return *this;
        }
        // postfix decrement
        iterator operator -- (int postfix)
        {
            iterator tmp(*this);
            p--;
            return tmp;
        }
        
    };
    
    /*******************************************
     * SET :: Non-Default Constructor
     *******************************************/
    template <class T>
    set<T>::set(int newCapacity)
    {
        // if newCapacity == 0
        if (newCapacity == 0)
        {
            // put a throw error
        }

        // allocate
        try
        {
            buffer = new T[newCapacity];
        }
        catch (std::bad_alloc)
        {
            throw "Error: set sizes must be greater than or equal to 0.";
        }

        // assign values
        numCapacity = newCapacity;
        if (buffer != NULL)
        {
            clear();
        }
    }
    
    /*******************************************
     * SET :: Copy Constructor
     *******************************************/
    template <class T>
    set<T>::set(const set & rhs)
    {
        // if no capacity, do nothing
        if (rhs.numCapacity == 0)
        {
            numCapacity = 0;
            numElements = 0;
            buffer = NULL;
            return;
        }
        
        try
        {
            buffer = new T[rhs.numCapacity];
        }
        catch (std::bad_alloc)
        {
            throw "error";
        }
        
        numCapacity = rhs.numCapacity;
        numElements = rhs.numElements;
        
        for (int i = 0; i < numElements; i++)
        {
            buffer[i] = rhs.buffer[i];
        }
        
        for (int i = numElements; i < numCapacity; i++)
        {
            buffer[i] = T();
        }
    }
    
    /*******************************************
     * SET :: Assignment Operator
     *******************************************/
    template <class T>
    set<T>& set<T>::operator=(const set <T> &rhs)
    {
        // do nothing if rhs is empty
        if (rhs.numCapacity == 0)
        {
            numCapacity = 0;
            numElements = 0;
        }
        
        // delete existing data, if any
        if (numCapacity)
        {
            delete [] buffer;
        }
        
        try
        {
            buffer = new T[rhs.numCapacity];
            numElements = rhs.numElements;
            numCapacity = rhs.numCapacity;
        }
        catch (std::bad_alloc)
        {
            throw "Error";
        }
        
        // copy the items over one at a time
        for (int i = numElements; i < numCapacity; i++)
        {
            buffer[i] = T();
        }
        
        return *this;
    }
    
    /*******************************************
     * SET :: Union Operator
     *******************************************/
    template <class T>
    set<T> set<T>::operator||(const set <T> &rhs)
    {
//        int iLhs = 0;
//        int iRhs = 0;
//
//        // needs 3rd variable "setReturn"
//
//        while (iLhs < numElements || iRhs < rhs.numElements)
//        {
//            if (iLhs == numElements)
//            {
//
//            }
//        }
        return *this;
    }
    
    /*******************************************
     * SET :: Intersection Operator
     *******************************************/
    template <class T>
    set<T> set<T>::operator&&(const set <T> &rhs)
    {
        return *this;
    }
    
    /*******************************************
     * SET :: Difference Operator
     *******************************************/
    template <class T>
    set<T> set<T>::operator-(const set <T> &rhs)
    {
        return *this;
    }
    
    /*******************************************
     * SET :: Find Index
     *        (binary search algorithm)
     *******************************************/
    template <class T>
    int set<T>::findIndex(const T & t) const
    {
        cout << "numElements at the beginnning of findIndex: " << numElements << endl;
        int iBegin = 0;
        int iEnd = numElements - 1;
        int iMiddle = 0;
        
        while (iBegin <= iEnd)
        {
            iMiddle = (iBegin + iEnd) / 2;
            if (t == buffer[iMiddle])
            {
                return iMiddle;
            }
            if (t < buffer[iMiddle])
            {
                iEnd = iMiddle - 1;
            }
            else
            {
                iBegin = iMiddle + 1;
            }
        }
        cout << "this is numElements in findIndex: " << numElements << endl;
        return numElements;
    }
    
    /*******************************************
     * SET :: Find (Iterator)
     *******************************************/
    template <class T>
    iterator<T> set<T>::find(const T & t)
    {

        int iFind = findIndex(t);

        if (iFind >= 0)
        {
            return iterator <T>(buffer + 1);
        }
        else
        {
            return end();
        }

    }
    
    /*******************************************
     * SET :: Insert
     *******************************************/
    template <class T>
    void set<T>::insert(const T t)
    {

        // find location where to insert
        int iInsert = findIndex(t);
        //cout << "this is iINsert " << iInsert << endl;
        
        // resize if full
        if (size() == capacity())
        {
            resize(numCapacity);
        }

        cout << "this is value of iInsert: " << iInsert << endl;
        if(buffer[iInsert] != t)
        {
            // shift elements
            for (int i = numElements; i < iInsert; i--)
            {
                buffer[i] = buffer[i + 1];
            }
            buffer[iInsert] = t;
            numElements++;
        }
    }
    
    /*******************************************
     * SET :: Erase
     *******************************************/
    template <class T>
    void set<T>::erase(iterator <T> & it)
    {
//
//        int iErase = findIndex(*it);
//        if (iErase == 0)
//        {
//            return;
//        }
//        if (buffer[iErase] == it)
//        {
//            for (int i = iErase; i < numElements; i++)
//            {
//                buffer[i] = buffer[i + 1];
//            }
//            numElements--;
//        }
//        return;
    }
    
    /*******************************************
     * SET :: Begin (Iterator)
     *******************************************/
    template <class T>
    iterator<T> set<T>::begin()
    {
        return iterator<T>(buffer);

    }
    
    /*******************************************
     * SET :: End (Iterator)
     *******************************************/
    template <class T>
    iterator<T> set<T>::end()
    {
        return iterator <T>(buffer + numElements);
    }
    
    /*******************************************
     * SET :: Resize
     *******************************************/
    template <class T>
    void set<T>::resize(int newCapacity)
    {
        int oldSize = newCapacity;
        
        newCapacity *= 2;
        T* newSet = new T[newCapacity];
        
        for (int i = 0; i < oldSize; i++)
        {
            newSet[i] = buffer[i];
        }
        delete [] buffer;
        buffer = newSet;
    }
    
}

#endif /* set_h */


